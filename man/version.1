.TH version 1 "October 1, 2025" "version 0.1.0" "User Commands"
.SH NAME
version \- simple multi-source semantic version management tool

.SH SYNOPSIS
.B version
[\fIglobal-flags\fR]
.RI [ \fIcommand\fR ] [ \fIargs...\fR ]

.SH DESCRIPTION
\fBversion\fR is a small command-line utility for reading, comparing and writing semantic-versioning (SemVer) values
across multiple sources (git tags, package manifests, pyproject, Cargo.toml, arbitrary files, etc).
It is intended for use in developer workflows and CI to ensure all version declarations remain in sync,
and for safely bumping or setting a new project version across configured files.

If invoked without a subcommand, \fBversion\fR behaves as \fBversion get\fR.

.SH GLOBAL OPTIONS
.TP
.B \-h, \-\-help
Show brief help and exit.
.TP
.B \-s, \-\-strict
Enable strict mode: during \fBget\fR and similar operations any source reporting a lower version than the maximum
is treated as an error. By default strict mode is disabled to support pre-commit and other workflows where git tags
may be absent or lagging.

.SH CONFIGURATION
\fBversion\fR reads configuration from either a dedicated \fIversion.toml\fR file in the current directory or from the
\fI[tool.version]\fR table inside \fIpyproject.toml\fR. When both are absent the built-in defaults listed in the
\fIDEFAULT SOURCES\fR section are used.

Configuration keys:
.IP
\fIDefaultVersion\fR (string) — fallback SemVer to use when no sources report a version. Default: \"0.1.0\" unless overridden.
.IP
\fIStrict\fR (bool) — enable strict mode by default.
.IP
\fIIgnoredFiles\fR (array of strings) — file globs to ignore for all subcommands.
.IP
\fIReadOnlyFiles\fR (array of strings) — file globs that \fBset\fR and \fBbump\fR will not modify.
.IP
\fISources\fR (table) — keyed by CamelCase source names. Each source has a \fIType\fR and optional parameters specific to type.

.RS 4
Example \fIversion.toml\fR:
.RS 4
.nf
DefaultVersion = "1.1.1"
Strict = true
ReadOnlyFiles = ["fileA", "*.toml"]

[Sources.Name1]
Type = "git"
ReadOnly = true

[Sources.AnotherName]
Type = "json"
Path = "file.json"
KeyPath = ["key1", "key2"]
.fi
.RE

Example \fIpyproject.toml\fR snippet:
.RS 4
.nf
[tool.version]
DefaultVersion = "1.1.1"
Strict = true

[tool.version.Sources.PackageJson]
Type = "json"
Path = "package.json"
KeyPath = ["version"]
.fi
.RE

.SH SOURCE TYPES
Each source has some shared options and some type-specific options.

Common options:
.TP
.B Type
Source type: \fIjson\fR, \fItoml\fR, \fIyaml\fR, \fIregexp\fR, \fItool\fR, \fIgit\fR.
.TP
.B VPrefix
Bool-like: \fItrue\fR, \fIfalse\fR or \fIauto\fR. Controls whether a leading \f\"v\f\" prefix should be preserved when writing values.
\fIauto\fR (default) preserves existing style or chooses sensible default for the source.

Type-specific fields:
.IP "\fIjson, toml, yaml\fR"
\fIPath\fR — path to file. \fIKeyPath\fR — array of keys locating the version value inside the file (for nested structures).
.IP "\fIregexp\fR"
Like the structured file types but \fIKeyPath\fR is instead an array of regular expressions that select a substring to read/update.
.IP "\fItool\fR"
\fICmd\fR — array of strings: command and its args to execute.
\fIPipe\fR — which stream to parse: \fIstdout\fR, \fIstderr\fR, or \fIboth\fR (default: stdout).
\fIExpectedStatus\fR — expected exit code of the tool.
\fICD\fR — directory to run the command in.
\fIEnv\fR — map of environment variables to set.
.IP "\fIgit\fR"
Reads SemVer-compatible tags from git. On \fBget\fR it may return at most one value (the latest tag).
On \fBset\fR it creates a new tag for the latest commit.
Options: \fICD\fR, \fIEnv\fR, \fIReadOnly\fR (bool).

.SH DEFAULT SOURCES
If no configuration is found the following default sources are used:
.RS 4
.nf
[Sources.PackageJson]
Type = "json"
VPrefix = "false"
Path = "package.json"
KeyPath = ["version"]

[Sources.PyProject]
Type = "toml"
VPrefix = "false"
Path = "pyproject.toml"
KeyPath = ["project", "version"]

[Sources.Cargo]
Type = "toml"
VPrefix = "false"
Path = "Cargo.toml"
KeyPath = ["package", "version"]

[Sources.Git]
Type = "git"
VPrefix = "auto"
.fi
.RE

.SH SUBCOMMANDS

.SMALLCAPS get
.TP
.B Syntax:
.RS
.nf
version get [\fIfallback-or-part\fR] [\fISource...\fR]
.fi
.RE

Fetch versions from selected sources and compare them.

Behavior:
.IP
If no \fISource\fR names supplied, all configured (or default) sources are checked.
.IP
\fIfallback-or-part\fR may be:
.RS 4
.nf
• A literal semver (X.Y.Z) — used as fallback if no source contains a version.
• One of the words: \fImajor\fR, \fIminor\fR, \fIpatch\fR — print only that version component.
.fi
.RE

.SMALLCAPS set
.TP
.B Syntax:
.RS
.nf
version set \fI<semver>\fR [\fISource...\fR]
.fi
.RE

Write the specified semver to all configured writable sources (or the list of sources supplied).
Respect per-source \fIVPrefix\fR policy when writing (force/strip/preserve leading \f\"v\f\").

.SMALLCAPS bump
.TP
.B Syntax:
.RS
.nf
version bump [\fImajor|minor|patch\fR] [\fIfallback-or-base\fR] [\fISource...\fR]
.fi
.RE

Read the current versions from the selected sources (or the default set), take the maximum as the base (or use the supplied base/fallback),
increment requested component (default: \fIminor\fR), write the result back to writable sources, and print the new version.

Bumping follows SemVer rules: bumping major resets minor and patch to 0; bumping minor resets patch to 0.

.SMALLCAPS max
.TP
.B Syntax:
.RS
.nf
version max [\fIitems...\fR]
.fi
.RE

Return the maximum version among the provided items. Items can be source names or literal semver values.
If nothing provided the configured DefaultVersion or \"0.1.0\" is printed.

.SH EXAMPLES
.TP
Read versions from defaults and print agreed value:
.RS 4
.nf
version
.fi
.RE

.TP
Check only package.json and git:
.RS 4
.nf
version get PackageJson Git
.fi
.RE

.TP
Set version to 2.0.0 across writable sources:
.RS 4
.nf
version set 2.0.0
.fi
.RE

.TP
Bump minor version only for Git source:
.RS 4
.nf
version bump minor Git
.fi
.RE

.SH FILES
.TP
.I version.toml
Project-local config file (optional).
.TP
.I pyproject.toml
If \fI[tool.version]\fR table present, used as configuration.

.SH AUTHORS
Written by ASCII Moth. Suggestions, bug reports and patches welcome.

.SH COPYRIGHT
This man page is provided under the same license as the \fBversion\fR project.
